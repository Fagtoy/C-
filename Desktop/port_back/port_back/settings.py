"""
Django settings for port_back project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from corsheaders.defaults import default_headers
from django.utils.log import DEFAULT_LOGGING
from dotenv import load_dotenv, find_dotenv
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.redis import RedisIntegration

BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(find_dotenv())

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '__+z2=(-=6cou%@3qj7tehoqd^l!3i9*9#9##d66eaz+8mupm6'
CRYPTO_KEY = 'EiRz#7!Z#0cZh3m9ddQtu2Hd4T!ZzqpFid46'  # TODO move to env
PGCRYPTO_KEY = CRYPTO_KEY
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', True)
if DEBUG == 'True':
    DEBUG = True
ENCODE_VERIFICATION_KEY = 'Mn7$$Bdfgt*U&KjNdAc2P*j2juj3%nWX0TsM'
DECODE_VERIFICATION_KEY = 'sZYMeg9W2xMciWjqC&Jd3f3@maGPKXsC2fQQ'
VRF_PROJECT_NAME = 'port.in.ua'

ALLOWED_HOSTS = [
    'stg.port.in.ua',
    'port.in.ua',
    'port.marad.gov.ua',
    'localhost:8080',
    'api.stg.port.in.ua',
    'stg-api03',
    'g-api03',
    'api-ac.port.in.ua',
    'api.stg.port.in.ua',
    '127.0.0.1',
    '10.64.10.70',
]
ALLOWED_HOSTS += [f'192.168.106.{i}' for i in range(256)]

if DEBUG:
    ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'core',
    'communication',
    'pgcrypto',
    'drf_yasg',
    'authorization',
    'authorization.TOTP',
    'authorization.U2F',
    'directory',
    'ship',
    'back_office',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_hotp',
    'signature',
    'document_generation',
    'notifications',
    'verification',
    'django_prometheus'
]

DATABASE_ROUTERS = ['port_back.database_routing.Router']

CORS_ALLOW_HEADERS = list(default_headers) + ['cache-control']
CORS_ALLOWED_ORIGINS = [
    'https://stg.port.in.ua',
    'https://port.in.ua',
    'https://port.marad.gov.ua',
    'http://localhost:8080',
    'https://api.stg.port.in.ua',
    'http://stg-api03',
    'http://g-api03',
    'https://api-ac.port.in.ua',
    'http://localhost:8080'
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r'http://192\.168\.106\.\d+:\d+',
    r'http://localhost\:\d+'
]
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

DEFAULT_LOGGING['handlers']['console']['filters'] = []

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'port_back.middleware.ThreadLocalUserMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'port_back.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'port_back.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'HOST': os.getenv('MAIN_DATABASE_HOST', 'port-db'),
        'USER': os.getenv('MAIN_DATABASE_USER', 'postgres'),
        'PASSWORD': os.getenv('MAIN_DATABASE_PASSWORD', 'password'),
        'NAME': os.getenv('MAIN_DATABASE_NAME', 'port_main'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'PORT': os.getenv('MAIN_DATABASE_PORT', '5432'),
    },
    'communication': {
        'NAME': os.getenv('COMMUNICATION_NAME', 'port_communication'),
        'HOST': os.getenv('COMMUNICATION_HOST', 'port-db'),
        'USER': os.getenv('COMMUNICATION_USER', 'postgres'),
        'PASSWORD': os.getenv('COMMUNICATION_PASSWORD', 'password'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'PORT': os.getenv('COMMUNICATION_PORT', '5432'),
    },
}

sentry_dsn = os.getenv('SENTRY_DSN', None)
if sentry_dsn:
    sentry_sdk.init(
        dsn=sentry_dsn,
        integrations=[DjangoIntegration(), CeleryIntegration(), RedisIntegration()],

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'core.User'

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DATE_INPUT_FORMATS': ['%d.%m.%Y'],
    'DATE_FORMAT': '%d.%m.%Y',
    'DATETIME_INPUT_FORMATS': ['%d.%m.%Y %H:%M'],
    'DATETIME_FORMAT': '%d.%m.%Y %H:%M',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

SWAGGER_SETTINGS = {
    'PERSIST_AUTH': True,
    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        },
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/django_static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.getenv('MEDIA_PATH', os.path.join(BASE_DIR, 'media'))
if not MEDIA_ROOT.startswith('/'):
    MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_ROOT)

OTP_TOTP_ISSUER = 'port.in.ua'

HOST_DOMAIN = os.getenv('HOST_DOMAIN', 'https://stg.port.in.ua')

TIME_TO_ACTIVATE_HRS = 24

EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_SES_ACCESS_KEY_ID = 'AKIA3MWN3KTIAI3QYUXQ'
AWS_SES_SECRET_ACCESS_KEY = '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'
AWS_SES_REGION_NAME = 'us-east-1'
AWS_SES_REGION_ENDPOINT = 'email.us-east-1.amazonaws.com'

REDIS_ADDR = os.getenv('CELERY_REDIS_URL', 'redis://127.0.0.1:6379/0')

CELERY_BROKER_URL = REDIS_ADDR
BROKER_URL = REDIS_ADDR
CELERY_RESULT_BACKEND = REDIS_ADDR
CELERY_ACCEPT_CONTENT = ['application/json', 'pickle']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

X_FRAME_OPTIONS = 'ALLOWALL'

if os.environ.get('DJANGO_DEVELOPMENT') is not None:
    from .settings_local import *

CIFRA_URL = os.getenv('CIFRA_URL', 'https://api-stg.cifra.com.ua/')
CIFRA_DIR_KEY = os.getenv('CIFRA_DIR_KEY', 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl'
                                           '90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjQwMzQ1ODcxLCJqd'
                                           'GkiOiJkZTBlNDhjMTkyZTI0OTY0OTcxZjlmMDJmNzMzZmQ3'
                                           'YiIsInVzZXJfaWQiOjEsImNvbXBhbnkiOjF9.UsGdgB20Oc'
                                           'FO5uNd26k5DoM0G3hqJmgY3pnE4xHNAhw')

SWAGGER_URL = os.getenv('SWAGGER_URL', None)

CORS_ORIGIN_WHITELIST = ['http://localhost:8080', 'http://192.168.106.0:8080']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}]-{levelname}-{name}: {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash.TCPLogstashHandler',
            'host': '10.64.10.92',
            'port': 5000,
            'version': 1,
            'message_type': f'port-{os.getenv("PROJECT_ENV", "localhost")}',
            'fqdn': False,
            'tags': ['django', f'port-{os.getenv("PROJECT_ENV", "localhost")}']
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['logstash'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['logstash'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['logstash'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console', 'logstash'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}
