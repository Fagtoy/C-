# Generated by Django 2.2 on 2020-08-11 15:56

from django.db import migrations, models
import django.db.models.deletion
import pgcrypto.fields
import user_profile.mixins


def update_content_type(apps, schema_editor):
    app = apps.get_app_config('document')
    app.models_module = app.models_module or True
    django.contrib.contenttypes.management.create_contenttypes(app)
    ContentType = apps.get_model('contenttypes', 'ContentType')
    old_ct = ContentType.objects.get(model='sertificatentz', app_label='sailor')
    new_ct = ContentType.objects.get(model='sertificatentz', app_label='document')
    old_ct.app_label = new_ct.app_label
    new_ct.delete()
    old_ct.save(force_update=True)


class Migration(migrations.Migration):
    dependencies = [
        ('directory', '0035_experincefordkk'),
        ('document', '0006_protocoldkk'),
    ]

    state_operations = [
        migrations.CreateModel(
            name='SertificateNTZ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ntz_number', models.BigIntegerField()),
                ('date_create', models.DateTimeField(blank=True, null=True)),
                ('date_start', models.DateField(blank=True, null=True)),
                ('date_end', models.DateField(blank=True, null=True)),
                ('is_red', models.BooleanField(default=False)),
                ('photo', pgcrypto.fields.CharPGPSymmetricKeyField(blank=True, max_length=250, null=True)),
                ('course_traning', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                     to='directory.Course')),
                ('ntz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                          to='directory.NTZ')),
                ('status_document',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   to='directory.StatusDocument')),
            ],
            bases=(models.Model, user_profile.mixins.GetAuthorMixin),
        ),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(state_operations=state_operations),
        migrations.RunPython(update_content_type)
    ]
