# Generated by Django 2.2 on 2020-08-09 13:01
import django.contrib.contenttypes.management
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import pgcrypto.fields
import user_profile.mixins


def update_content_type(apps, schema_editor):
    app = apps.get_app_config('document')
    app.models_module = app.models_module or True
    django.contrib.contenttypes.management.create_contenttypes(app)
    ContentType = apps.get_model('contenttypes', 'ContentType')
    old_ct = ContentType.objects.get(model='lineinservicerecord', app_label='sailor')
    new_ct = ContentType.objects.get(model='lineinservicerecord', app_label='document')
    old_ct.app_label = new_ct.app_label
    new_ct.delete()
    old_ct.save(force_update=True)


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('directory', '0033_sex'),
        ('sailor', '0109_auto_20200809_1600'),
        ('document', '0001_initial'),
    ]

    state_operations = [
        migrations.CreateModel(
            name='LineInServiceRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_vessel', models.CharField(blank=True, max_length=255, null=True)),
                ('ship_owner', models.CharField(blank=True, max_length=255, null=True)),
                ('number_vessel', models.CharField(blank=True, max_length=15, null=True)),
                ('propulsion_power', models.FloatField(blank=True, null=True)),
                ('electrical_power', models.FloatField(blank=True, null=True)),
                ('responsibility',
                 django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True,
                                                           size=None)),
                ('refrigerating_power', models.FloatField(blank=True, null=True)),
                ('book_registration_practical', models.BooleanField(default=False)),
                ('equipment_gmzlb', models.BooleanField(default=False)),
                ('date_start', models.DateField(blank=True, null=True)),
                ('place_start', models.CharField(blank=True, max_length=255, null=True)),
                ('place_end', models.CharField(blank=True, max_length=255, null=True)),
                ('date_end', models.DateField(blank=True, null=True)),
                ('trading_area', models.TextField(blank=True, null=True)),
                ('ports_input', models.TextField(blank=True, null=True)),
                ('full_name_master', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('full_name_master_eng', models.CharField(blank=True, default='', max_length=250, null=True)),
                ('date_write', models.DateField(blank=True, null=True)),
                ('gross_capacity', models.FloatField(blank=True, null=True)),
                ('levelRefrigerPlant', models.FloatField(blank=True, null=True)),
                ('photo', pgcrypto.fields.CharPGPSymmetricKeyField(blank=True, max_length=200, null=True)),
                ('number_page_book', models.CharField(blank=True, max_length=10, null=True)),
                ('port_of_registration', models.CharField(blank=True, max_length=150, null=True)),
                ('record_type', models.CharField(blank=True, choices=[(
                                                                      'Трудова книжка, довідка про фаховий стаж, ремонт, практику, тощо',
                                                                      'Трудова книжка, довідка про фаховий стаж, ремонт, практику, тощо'),
                                                                      ('Довідка про стаж плавання',
                                                                       'Довідка про стаж плавання')], max_length=255,
                                                 null=True)),
                ('place_work', models.CharField(blank=True, max_length=255, null=True)),
                ('days_work', models.IntegerField(blank=True, null=True)),
                ('is_repaired', models.BooleanField(default=False)),
                ('repair_date_from', models.DateField(blank=True, null=True)),
                ('repair_date_to', models.DateField(blank=True, null=True)),
                ('days_repair', models.IntegerField(blank=True, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             to=settings.AUTH_USER_MODEL)),
                ('mode_of_navigation',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   to='sailor.ModeOfNavigation')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                               to='directory.PositionForExperience')),
                ('responsibility_work_book',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   to='directory.ResponsibilityWorkBook')),
                ('service_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                     related_name='lines', to='document.ServiceRecordSailor')),
                ('status_line',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='directory.StatusDocument')),
                ('type_geu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                               to='sailor.TypeGeu')),
                ('type_vessel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                  to='sailor.TypeVessel')),
            ],
            options={
                'verbose_name': 'Запис в ПКМ або довідка про стаж',
            },
            bases=(user_profile.mixins.GetAuthorMixin, models.Model),
        ),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(state_operations=state_operations),
        migrations.AlterField(
            model_name='lineinservicerecord',
            name='mode_of_navigation',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='lineinservicerecord',
            name='type_geu',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='lineinservicerecord',
            name='type_vessel',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunPython(update_content_type)
    ]
