# Generated by Django 2.2 on 2020-08-08 11:33

import datetime

import django.contrib.contenttypes.management
import django.contrib.postgres.fields
import django.db.models.deletion
import gm2m
import pgcrypto.fields
from django.conf import settings
from django.db import migrations, models

import user_profile.mixins


def update_content_type(apps, schema_editor):
    app = apps.get_app_config('statement')
    app.models_module = app.models_module or True
    django.contrib.contenttypes.management.create_contenttypes(app)
    ContentType = apps.get_model('contenttypes', 'ContentType')
    old_ct = ContentType.objects.get(model='sailorstatementdkk', app_label='sailor')
    new_ct = ContentType.objects.get(model='sailorstatementdkk', app_label='statement')
    old_ct.app_label = new_ct.app_label
    new_ct.delete()
    old_ct.save(force_update=True)

class Migration(migrations.Migration):

    dependencies = [
        ('directory', '0031_auto_20200731_1022'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('sailor', '0092_auto_20200808_1432'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('statement', '0003_statementmedicalcertificate'),
    ]

    state_operations = [
        migrations.CreateModel(
            name='SailorStatementDKK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('date_create', models.DateTimeField(default=datetime.datetime.now)),
                ('is_payed', models.BooleanField(default=False)),
                ('sailor', pgcrypto.fields.IntegerPGPSymmetricKeyField()),
                ('list_positions', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('photo', pgcrypto.fields.CharPGPSymmetricKeyField(blank=True, max_length=200, null=True)),
                ('is_continue', models.IntegerField(default=0)),
                ('userexam_id', models.IntegerField(blank=True, null=True)),
                ('is_cadet', models.BooleanField(default=False)),
                ('date_meeting', models.DateField(null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             to=settings.AUTH_USER_MODEL)),
                ('branch_office',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='directory.BranchOffice')),
                ('on_create_rank', models.ManyToManyField(related_name='on_create_rank', to='directory.Rank')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                               to='directory.Position')),
                ('rank', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='directory.Rank')),
                ('related_docs', gm2m.fields.GM2MField('document.Education', 'document.CertificateETI',
                                                       'document.QualificationDocument',
                                                       'document.ProofOfWorkDiploma',
                                                       'document.MedicalCertificate', 'sailor.DependencyDocuments',
                                                       blank=True, related_name='related_state_pr',
                                                       through_fields=('gm2m_src', 'gm2m_tgt', 'gm2m_ct', 'gm2m_pk'))),
                ('responsible', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                  to='sailor.ResponsibleForStatementDKK')),
                ('status_document',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='directory.StatusDocument')),
                ('type_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                    to='directory.TypeDocument')),
            ],
            options={
                'abstract': False,
            },
            bases=(user_profile.mixins.GetAuthorMixin, models.Model),
        ),
    ]

    operations = [
            migrations.SeparateDatabaseAndState(state_operations=state_operations),
            migrations.RunPython(update_content_type)
        ]
