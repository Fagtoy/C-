image: alpine
stages:
  - test-req
  - backup
  - deploy

test-req-basic.img:
  stage: test-req
  retry: 
  image:  git.disoft.us:5050/itcs/ac-back:basic
  allow_failure: true
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - apt-get update
    - apt-get install -yqq $(cat DEV-etc/basic-img/dpkg_requirements.txt)
    - pip3 install --no-cache-dir -r requirements.txt
  artifacts:
    paths:
      - ./

backups:
  image: alpine
  stage: backup
  when: manual
  script:
    - apk add --no-cache rsync openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "make backups"
    - ssh -p $DPL_PORT root@$DPL_SERVER "bash $DIR/DEV-etc/backup_before_update.sh $DIR"
  environment:
    name: $CI_COMMIT_BRANCH
  only:
    refs:
      - master
    changes:
      - ./*/migrations/*

backups-stg:
  image: alpine
  stage: backup
  script:
    - apk add --no-cache rsync openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "make backups"
    - ssh -p $DPL_PORT root@$DPL_SERVER "bash $DIR/DEV-etc/backup_before_update.sh $DIR"
  environment:
    name: $CI_COMMIT_BRANCH
  only:
    refs:
      - stg
    changes:
      - ./*/migrations/*

deploy:
  image: alpine
  stage: deploy
  rules: 
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "stg" || $CI_COMMIT_BRANCH == "dev"'
      when: always
    - when: never
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - apk add --no-cache rsync openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "copy source code"
    - for serv in $DPL_SERVER; 
      do
      echo $serv;
      rsync  -e "ssh -p $DPL_PORT" --exclude ".git" -ra  --delete ./ root@$serv:$DIR/;
      echo "copy instal requirements";
      ssh -p $DPL_PORT root@$serv "
      source $DIR_env/bin/activate;
      cd $DIR;
      echo -e '$ENV' > .env;
      pip3 install -r requirements.txt;
      python3 manage.py migrate;
      python3 manage.py migrate communication --database keys_communcation && echo OK;
      systemctl daemon-reload && echo OK;
      systemctl restart celery-itcs.service ac-back.service && echo OK;
      test -f /etc/systemd/system/beat-itcs.service && systemctl restart beat-itcs.service || echo 'net beat'";
      done;
      echo DONE;
