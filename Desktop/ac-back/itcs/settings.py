"""
Django settings for itcs project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
from datetime import timedelta

import sentry_sdk
from corsheaders.defaults import default_headers
from django.utils.log import DEFAULT_LOGGING
from dotenv import find_dotenv, load_dotenv
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

load_dotenv(find_dotenv())

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

TEMPLATE_DEBUG = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vg*aa3&e9au97=z)oibiv-&1g3!z!tr&y4d$rk3@vrffm&v2@c'
JWT_AUTH_KEY = 'vg*aa3&e9au97=z)oibiv-&1g3!z!tr&y4d$rk3@vrffm&v2!s'
CRYPTO_KEY = 'UkRla3lkOFc4LV80Z05pbFMwMkNmWmNSXzVCUG9kRko1SmhqUmR3SGZObz0='
IDGOVUA_CRYPTO_KEY = 'cw_0x689RpI-jtRR7oE8h_eQsKImvJapLeSbXpwF4e4='
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

sentry_sdk.init(
    dsn="https://acbc34650d3b44dab08e1ff00e4d04da@o341633.ingest.sentry.io/1882505",
    # integrations=[DjangoIntegration()],
    integrations=[CeleryIntegration(), DjangoIntegration(), RedisIntegration()],

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)

# Application definition

INSTALLED_APPS = [

    'django_prometheus',
    'clearcache',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'gm2m',
    'taggit',
    'core',
    'yubikey_api_auth',
    'docs',
    'directory',
    'corsheaders',
    'sailor',
    'communication',
    'pgcrypto',
    'user_profile',
    'drf_yasg',
    'verification',
    'personal_cabinet',
    'sms_auth',
    'news',
    'payments',
    'idgovua_auth',
    'reports',
    'delivery',
    'public_api',
    'cadets',
    'signature',
    'back_office',
    'certificates',
    'agent',
    'notifications',
    'sailor.statement',
    'sailor.document',
    'payments.platon',
    'reports.back_office_report',
    'training',
    'cacheops',
    # 'elasticapm.contrib.django',
]

MIDDLEWARE = [
    # 'elasticapm.contrib.django.middleware.TracingMiddleware',
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'itcs.urls'

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = list(default_headers) + ['cache-control']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ELASTIC_APM = {
#     'SERVICE_NAME': f'AC-ITCS-{os.getenv("PROJECT_ENV")}',
#     'SERVER_URL': 'http://10.64.10.72:8200'
# }

WSGI_APPLICATION = 'itcs.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASE_ROUTERS = ['itcs.database_routing.AuthRouter']

DATABASES = {
    'default': {
        'HOST': os.getenv('MAIN_DATABASE_HOST', 'ac-db'),
        'USER': os.getenv('MAIN_DATABASE_USER', 'postgres'),
        'PASSWORD': os.getenv('MAIN_DATABASE_PASSWORD', 'pass'),
        'NAME': os.getenv('MAIN_DATABASE_NAME', 'itcs_main'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'PORT': os.getenv('MAIN_DATABASE_PORT', '5432'),
        'PGCRYPTO_KEY': 'R438&*fqo&bll0bb3c6ijKF^5X3vsSw^H*LOE@R'
    },
    'keys_communcation': {
        'NAME': os.getenv('COMMUNICATION_NAME', 'communication'),
        'HOST': os.getenv('COMMUNICATION_HOST', 'ac-db'),
        'USER': os.getenv('COMMUNICATION_USER', 'postgres'),
        'PASSWORD': os.getenv('COMMUNICATION_PASSWORD', 'pass'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'PORT': os.getenv('COMMUNICATION_PORT', '5432'),
    },
}

SIMPLE_JWT = {
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=15),
    'ROTATE_REFRESH_TOKENS': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'SIGNING_KEY': JWT_AUTH_KEY
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'

INTERNAL_IPS = ['127.0.0.1']

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'itcs.ExpireToken.ExpiringTokenAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DATETIME_FORMAT': '%H:%M:%S %d.%m.%Y',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}
# in minutes
TIME_SESSION = 600
PGCRYPTO_KEY = 'R438&*fqo&bll0bb3c6ijKF^5X3vsSw^H*LOE@R'

# STATIC_ROOT = '/home/dev/ac-back/static'
# STATIC_URL = '/static/'

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )

DEFAULT_LOGGING['handlers']['console']['filters'] = []

REDIS_ADDR = 'redis://' + os.getenv('REDIS_HOST', 'ac-redis') + ':6379'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_ADDR + '/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'KEY_PREFIX': 'django_',
        }
    }
}

CACHEOPS_REDIS = REDIS_ADDR + '/1'

CACHEOPS = {
    'core.user': {'ops': 'get', 'timeout': 60 * 15},

    'auth.*': {'ops': {'fetch', 'get'}, 'timeout': 60 * 30},

    'auth.permission': {'ops': 'all', 'timeout': 60 * 30},
    'directory': {'ops': 'all', 'timeout': 60 * 60 * 4},
    'communication': {'ops': 'all', 'timeout': 60 * 10},
    '*.*': {'ops': (), 'timeout': 60 * 60},
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.getenv('MEDIA_ROOT', '/mnt/media')

DOCS_URL = '/docs/docs_file/'
DOCS_ROOT = os.path.join(BASE_DIR, 'docs/docs_file')

CELERY_BROKER_URL = REDIS_ADDR + '/0'
CELERY_RESULT_BACKEND = REDIS_ADDR + '/0'
CELERY_ACCEPT_CONTENT = ['application/json', 'pickle']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        },
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}
if not os.path.exists(os.path.join('/var/log/itcs-back')):
    try:
        os.mkdir(os.path.join('/var/log/itcs-back'), 755)
    except Exception:
        pass
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}]-{levelname}-{name}: {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'payments_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join('/var/log/itcs-back/payment.log'),
            'formatter': 'verbose',
        },
        'ntz_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join('/var/log/itcs-back/ntz_cert.log'),
            'formatter': 'verbose',
        },
        'payments_multi_obj': {
            'class': 'logging.FileHandler',
            'filename': os.path.join('/var/log/itcs-back/payments_multi_obj.log'),
            'formatter': 'verbose',
        },
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash.TCPLogstashHandler',
            'host': '10.64.10.72',
            'port': 5000,
            'version': 1,
            'message_type': f'AC-ITCS-{os.getenv("PROJECT_ENV", "localhost")}',
            'fqdn': False,
            'tags': ['django', f'AC-ITCS-{os.getenv("PROJECT_ENV", "localhost")}']
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['logstash'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['logstash'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'ac-back.payments': {
            'handlers': ['console', 'payments_file', 'logstash'],
            'level': 'INFO',
            'propagate': True
        },
        'ac-back.ntz_cert': {
            'handlers': ['console', 'ntz_file', 'logstash'],
            'level': 'DEBUG',
            'propagate': True
        },
        'eti_integration': {
            'handlers': ['console', 'logstash'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'multi_obj_payments': {
            'handlers': ['console', 'payments_multi_obj', 'logstash'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}

API_ITCS_URL = 'https://api.itcs.net.ua/'

ENABLE_ETI_INTEGRATION_TEXT = os.getenv('ENABLE_ETI_INTEGRATION', 'false')

ENABLE_ETI_INTEGRATION = True if ENABLE_ETI_INTEGRATION_TEXT == 'true' else False

NAME_MAX_DISTANCE = 2

QR_CHECKER_URL = 'https://verification.marad.org.ua/check_qr/'
SAILOR_PUBLIC_URL = 'http://localhost:8080/seafarer/'
QR_CHECKER_REDIRECT = True  # If set - redirect on sailor public url, else - return JSON with sailor id

SMS_AUTH = ('380665755989', 'DiaNetSCR!')
# SMS code validity period when registering and entering the seafarer's personal cabinet (minutes)
CODE_EXPIRATION_TIME = 10

AST_URL = os.getenv('AST_URL', 'https://api.stg.edu.mariner.com.ua')

PAYGOVUA_TEST_MODE = os.getenv('PAYGOVUA_TEST_MODE', False)
PAYGOVUA_URL = os.getenv('PAYGOVUA_URL', 'https://pay.gov.ua:12443/ecomm/v1.0/')

PAYGOVUA_CMD = 'Start'
PAYGOVUA_MERCHANT_NAME = os.getenv('PAYGOVUA_MERCHANT_NAME', 'sea.e-transport.gov.ua')
PAYGOVUA_PUBLIC_KEY = os.getenv('PAYGOVUA_PUBLIC_KEY', './payments/keys/CabinetMoraka_Server_Public.pem')
PAYGOVUA_OWN_PRIVATE_KEY = os.getenv('PAYGOVUA_OWN_PRIVATE_KEY', './payments/keys/sea.e-transport.gov.ua_Private.pem')
PAYGOVUA_PRIVATE_PASSWORD = None
PAYGOVUA_CCY_CODE = 980

REPORTS_SENDER_EMAIL = 'itcs@gov.ua'
REPORTS_SENDER_SUBJECT = '{} from itcs.gov.ua'
REPORT_SENDER_MESSAGE = '<p>Now you can download requested report.</p> <br/> <p>Please click on the link below.</p>' \
                        '<p><a href="{}"><span>DOWNLOAD</span></a></p>'

PAYGOVUA_DKK_STATEMENT_DESCRIPTION = 'Payment for DKK statement test_description'

PRICE_SERVICE_RECORD = 996
PRICE_SERVICE_RECORD_MORRICHSERVICE = 270

AWS_ACCESS_KEY_ID = 'AKIA6AHXAX7AFSAQD7HG'
AWS_SECRET_ACCESS_KEY = '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'
FCM_PLATFORM_CREDENTIAL = 'AAAADQaHUyw:APA91bFDgjJZxSdYBY1W6GPXtg2VRiJLJa6FlqIi3ax4-U0m1EGtjhVMkNTI7Cn5r62k_cADsOWS' \
                          'LCcqVwngCcaBb9CIXIOKtzABYloFeLoT0--kVzARWo4F1EldKiW8wA_5yJdXSp0z'

AWS_SNS_ACCESS_KEY_ID = 'AKIA3MWN3KTICPNISDEJ'
AWS_SNS_SECRET_KEY = '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'

AWS_ESAILOR_ARN = 'arn:aws:sns:eu-central-1:783189497040:app/GCM/E-Sailor'

REPORTS_CHUNK_SIZE = 500

API_KEY_NOVAPOSHTA = '60df291c6583a85533b30cc7ec0fa642'
URL_API_NOVAPOSHTA = 'https://api.novaposhta.ua/v2.0/json/'

VCHASHO_MAIN_TOKEN = 'd21aaf96-f5c0-4023-b9e0-21494e413ccf'

MAX_UPLOAD_SIZE = 82914560
MAX_UPLOAD_SIZE_PHOTO = 10485760

ENV_ADDITIONAL_VERIFICATION = os.getenv('POST_VERIFICATION', 'false')
ENV_REJECT_EXP_VERIFICATION = os.getenv('VERIFICATION_REJECT_EXP', 'false')
if ENV_ADDITIONAL_VERIFICATION == 'true':
    ENABLE_ADDITIONAL_VERIFICATION = True
else:
    ENABLE_ADDITIONAL_VERIFICATION = False
if ENV_REJECT_EXP_VERIFICATION == 'true':
    ENABLE_REJECT_EXP_VERIFICATION = True
else:
    ENABLE_REJECT_EXP_VERIFICATION = False
PHONE_TO_ADDITIONAL_VERIFICATION = '+380949458449'
# PHONE_TO_ADDITIONAL_VERIFICATION = '+380506673966'
EMAIL_TO_ADDITIONAL_VERIFICATION = 'balanyuksv@gmail.com'
# EMAIL_TO_ADDITIONAL_VERIFICATION = 'i.golubev@disoft.us'
HOURS_TO_RESEND_ADDITIONAL_VERIFICATION = 2
TIME_START_SEND_ADDITIONAL_VERIFICATION = {'hour': 8, 'minute': 30}  # H:M
TIME_END_SEND_ADDITIONAL_VERIFICATION = {'hour': 17, 'minute': 30}  # H:M

MONTANA_MAIL = 'montananebesimenya@gmail.com'
# MONTANA_MAIL = 'i.golubev@disoft.us'

EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_SES_ACCESS_KEY_ID = 'AKIA3MWN3KTIAI3QYUXQ'
AWS_SES_SECRET_ACCESS_KEY = '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'
AWS_SES_REGION_NAME = 'us-east-1'
AWS_SES_REGION_ENDPOINT = 'email.us-east-1.amazonaws.com'

TURBO_SMS_AUTH = ('abills_dianet', 'c9UHvgRWHpjxB2ey')

SMALLBOATS_URL = os.getenv('SMALLBOATS_URL', 'https://api-plcraft.itcs.net.ua/')

# if sys.argv[1:2] != ['migrate']:
AUTH_USER_MODEL = 'core.User'

if "test" in sys.argv[1:]:
    class DisableMigrations(object):
        except_apps = {'public_api'}

        def __contains__(self, item):
            return item not in self.except_apps

        def __getitem__(self, item):
            return super(DisableMigrations, self).__getitem__(item) if item in self.except_apps else None


    MIGRATION_MODULES = DisableMigrations()

ENABLE_DUPLICATE_DATA_TO_INSPECTION = os.environ.get('DUPLICATE_DATA', 'false')
if ENABLE_DUPLICATE_DATA_TO_INSPECTION == 'true':
    INSTALLED_APPS += ['inspection']
    DATABASES.update({'inspection': {
        'NAME': os.getenv('INSPECTION_NAME', 'inspection'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'HOST': os.getenv('INSPECTION_HOST', '172.16.1.229'),
        'PORT': os.getenv('INSPECTION_PORT', '5432'),
        'USER': os.getenv('INSPECTION_USER', 'itcs_u'),
        'PASSWORD': os.getenv('INSPECTION_PASSWORD', 'PasSWordishe5'),
        'PGCRYPTO_KEY': 'R438&*fqo&bll0bb3c6ijKF^5X3vsSw^H*LOE@R',
    }
    })

ENV_PLATON_TEST_MODE = os.getenv('PLATON_TEST_MODE', False)
if ENV_PLATON_TEST_MODE == 'true':
    PLATON_TEST_MODE = True
else:
    PLATON_TEST_MODE = False

MDU_ID_GOV_UA_CLIENT_ID = os.getenv('MDU_ID_GOV_UA_CLIENT_ID', False)
MDU_ID_GOV_UA_CLIENT_SECRET = os.getenv('MDU_ID_GOV_UA_CLIENT_SECRET', False)

if os.getenv('DJANGO_DEVELOPMENT') is not None:
    from .settings_debug import *

SWAGGER_URL = os.getenv('SWAGGER_URL', None)

try:
    from .local_settings import *
except Exception:
    pass
